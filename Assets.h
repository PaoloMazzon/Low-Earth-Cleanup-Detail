// This code was automatically generated by GenHeader.py
#pragma once
#include "JamUtil.h"

// Forward declare the asset array
extern JULoadedAsset ASSETS[9];

#ifdef ASSETS_IMPLEMENTATION
JULoadedAsset ASSETS[] = {
    {"assets/Background.png"},
    {"assets/Font.png"},
    {"assets/Foreground.png"},
    {"assets/Midground.png"},
    {"assets/Player.png"},
    {"assets/PlayerThruster.png"},
    {"assets/Sun.png"},
    {"assets/Trash1.png"},
    {"assets/Trash2.png"},
};
#endif

typedef struct Assets {
    JULoader loader;
    VK2DTexture texBackground;
    VK2DTexture texFont;
    VK2DTexture texForeground;
    VK2DTexture texMidground;
    VK2DTexture texPlayer;
    VK2DTexture texPlayerThruster;
    VK2DTexture texSun;
    VK2DTexture texTrash1;
    VK2DTexture texTrash2;
} Assets;

// Functions to create and destroy the asset struct
Assets *buildAssets();
void destroyAssets(Assets *s);

#ifdef ASSETS_IMPLEMENTATION
Assets *buildAssets() {
    Assets *s = malloc(sizeof(struct Assets));
    s->loader = juLoaderCreate(ASSETS, 9);
    s->texBackground = juLoaderGetTexture(s->loader, "assets/Background.png");
    s->texFont = juLoaderGetTexture(s->loader, "assets/Font.png");
    s->texForeground = juLoaderGetTexture(s->loader, "assets/Foreground.png");
    s->texMidground = juLoaderGetTexture(s->loader, "assets/Midground.png");
    s->texPlayer = juLoaderGetTexture(s->loader, "assets/Player.png");
    s->texPlayerThruster = juLoaderGetTexture(s->loader, "assets/PlayerThruster.png");
    s->texSun = juLoaderGetTexture(s->loader, "assets/Sun.png");
    s->texTrash1 = juLoaderGetTexture(s->loader, "assets/Trash1.png");
    s->texTrash2 = juLoaderGetTexture(s->loader, "assets/Trash2.png");
    return s;
}

void destroyAssets(Assets *s) {
    juLoaderFree(s->loader);
    free(s);
}
#endif
